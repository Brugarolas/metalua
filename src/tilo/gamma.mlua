-{ extension 'match' }

a2s = require 'metalua.compiler.ast_to_luastring'

function log(mod, level, fmt, ...)
    local args = {...}
    for k, v in pairs(args) do 
        if type(v)=='table' then args[k]=table.tostring(v) end
    end
    local msg = string.format(fmt, unpack(args))
    printf("[%s]\t%s", mod, msg)
end

GAMMA = { }
GAMMA.__index = GAMMA
GAMMA.__type  = 'gamma'


-- sharp markers are introduced by accept(), called by `Call and `Apply.
-- #arg <: param

function GAMMA :sharp_tf(tf)
    checks('gamma', 'tf')
    if tf.tag=='TCurrently' then return `TField
    else return { tag=tf.tag, self :sharp_te(tf[1]) } end
end

function GAMMA :sharp_te(te)
    checks('gamma', 'te')
    match te with
    | `TId{ name } -> 
        if not self.prim_types[name] then self :set_sharp(name) end
        return te
    | `TDyn -> return te
    | `TFunction{ ... } -> return te
    | `TTable{ def, prs, true } -> return `TTable{ def, prs, false } 
    | `TTable{ def, prs, ... } ->
        local r_pairs = { }
        for i, p in ipairs(prs) do
            r_pairs[i] = `TPair{ p[1], self :sharp_tf(p[2]) }
        end
        return `TTable{ self :sharp_tf(def), r_pairs, false }
    end
end

function GAMMA :sharp_sub_te(te1, te2)
    --log('XXX','',"#%s <: %s", te1, te2)
    checks('gamma', 'te', 'te')
    if te1.tag ~= 'TId' then
        te1 = self :sharp_te(te1)
    elseif not self.prim_types [te1[1]] then
        self :set_sharp (te1[1])
    end
    self :sub_te (te1, te2)
end

-- Checks whether a value of type `te` can be held in a field of type
-- `tf`.
function GAMMA :accept(te, tf)
    checks('gamma', 'te', 'tf')
    local tag=tf.tag
    match tf with
    | `TVar{ te2 } | `TConst{ te2 } | `TCurrently{ te2 } ->
        self :sharp_sub_te(te, te2)
    | `TField -> error "private field can't accept data"
    end
end

-- Used by:
-- * `tebar_to_te` to cut first `te` from `tebar` variables
function GAMMA :eq_tebar(tebar1, tebar2)
    checks('gamma', 'tebar', 'tebar')
    match tebar1, tebar2 with
    | `TIdbar{ name }, `TIdbar{ name } -> -- pass
    | `TIdbar{ name }, tebar | tebar, `TIdbar{ name } ->
        local x = self.tebar.eq[name]
        if not x then x={ }; self.tebar.eq[name]=x end
        table.insert(x, tebar)
        log('GAMMA', 'DEBUG', "TEBAR: %s = %s", name, a2s(tebar))
    | `TDynbar, _  | _, `TDynbar -> -- pass
    | `TCatbar, _ | _, `TCatbar -> error "not implemented"
    | _, _ if tebar1.tag==nil and tebar2.tag==nil ->
        local n = math.max(#tebar1, #tebar2)
        for i=1,n do
            gamma :eq_te(tebar1[i] or `TId "nil", tebar2[i] or `TId "nil")
        end
    end
end

-- Used by:
-- * `typeof.Annot`, to check that the annotation is a weakening
function GAMMA :sub_ts(ts1, ts2)
    checks('gamma', 'ts', 'ts')
    match ts1, ts2 with
    | `TPass, `TPass -> return nil
    | `TReturn{ teb1 }, `TReturn{ teb2 } -> self :sub_tebar(teb1, teb2)
    | _, _ -> type_error('ts', ts1, '<:', ts2)
    end
end

-- Used by:
-- * `typeof.Call`, to decompose a `TId` into a `TFunction`
-- * `typeof.SetIndex`, for TVar <: [field; k:var te]
-- * `assign`, to check that TVar types don't change
function GAMMA :eq_te(te1, te2)
    checks('gamma', 'te', 'te')
    match te1, te2 with
    | `TDyn, _ | _, `TDyn -> -- pass
    | `TId{ name }, `TId{ name } -> -- pass
    | `TId{ name }, te | te, `TId{ name } ->
        if self.prim_types[name] then
            if te.tag=='TId' then te, name = te1, te2[1] -- swap
            else type_error ('te', te1, '=', te2) end -- primitive = non-variable
        end
        local x = self.te.eq[name]
        if not x then x={ }; self.te.eq[name]=x end
        table.insert(x, te)
        log('GAMMA', 'DEBUG', "TE: %s = %s", name, a2s(te))
    | _, _ -> type_error ('te', te1, '=', te2)
    end
end


-- Used by:
-- currently nobody; might later prove need for some variants
-- of `typeof.Call` where we know almost nothing about args type.
-- TODO: get rid of this?
function GAMMA :sub_tebar(tebar1, tebar2)
    checks('gamma', 'tebar', 'tebar')
    match tebar1, tebar2 with
    | `TDynbar, _ | _, `TDynbar -> -- pass
    | `TIdbar{ name }, `TIdbar{ name } -> -- pass
    | _, _ if tebar1.tag==nil and tebar2.tag==nil ->
    --| {tag=nil}, {tag=nil} -> --bug in match?!
        for i=1, math.max(#tebar1, #tebar2) do
            local te1 = tebar1[i] or `TId 'nil'
            local te2 = tebar2[i] or `TId 'nil'
            self :sub_te(te1, te2)
        end
    | `TIdbar{ name }, tebar ->
        local x = self.tebar.sub_pos[name]
        if not x then x={ }; self.tebar.sub_pos[name]=x end
        table.insert(x, tebar)
        log('GAMMA', 'DEBUG', "TEBAR: %s <: %s", name, a2s(tebar))
    | tebar, `TIdbar{ name } ->
        local x = self.tebar.sub_neg[name]
        if not x then x={ }; self.tebar.sub_neg[name]=x end
        table.insert(x, tebar)
        log('GAMMA', 'DEBUG', "TEBAR: %s :> %s", name, a2s(tebar))
    | `TCatbar{ car, cdr }, _ | _, `TCatbar{ car, cdr} ->
        error "not implemented"
    end
end

-- Used by: 
-- * `typeof.Index`, for TVar <: [field; k:const v]
-- * `typeof.SetIndex`, when table is a TId, to check new value type compat
-- * `typeof.Set`, to check compat between new var value with annotation
function GAMMA :sub_te(te1, te2)
    checks('gamma', 'te', 'te')
    match te1, te2 with
    | `TDyn{...}, _ | _, `TDyn{...} -> -- pass
    | `TId{ name }, `TId{ name } -> -- pass
    | `TId{ name }, te if not self.prim_types[name]->
        local x = self.te.sub_pos[name]
        if not x then x={ }; self.te.sub_pos[name]=x end
        table.insert(x, te)
        log('GAMMA', 'DEBUG', "TE: %s <: %s", name, a2s(te))
    | `TId{ a }, `TId{ b }
        if self.prim_types[a] and self.prim_types[b] ->
        type_error('te', te1, '<:', te2)
    | te, `TId{ name } ->
        local x = self.te.sub_neg[name]
        if not x then x={ }; self.te.sub_neg[name]=x end
        table.insert(x, te)
        log('GAMMA', 'DEBUG', "TE: %s :> %s", name, a2s(te))
    | `TFunction{ args1, res1 }, `TFunction{ args2, res2 } ->
        for i=1, math.max(#args1, #args2) do
            local arg1 = args1[i] or `TCurrently{ `TId 'nil' }
            local arg2 = args2[i] or `TCurrently{ `TId 'nil' }
            self :sub_te(arg2, arg1)
        end
        self :sub_tebar(res1, res2)
    | `TTable{ def1, pairs1, unref1 }, `TTable{ def2, pairs2, unref2 } ->
        if not unref1 and unref2 then type_error('te', te1, "<:", te2) end
        self :sub_tf (def1, def2)
        local can1, can2 = { }, { }
        local function canonize(p)
            return p[1] and p.tag..' '..p[1] or p.tag
        end
        for _, p in ipairs (pairs1) do can1[canonize(p[1])] = p[2] end
        for _, p in ipairs (pairs2) do can2[canonize(p[1])] = p[2] end
        for k, tf1 in pairs(can1) do
            local tf2 = can2[k] or def2
            self :sub_tf (tf1, tf2)
        end
        for k, tf2 in pairs(can2) do
            if not can1[k] then self :sub_tf (def1, tf2) end
        end
    | _, _ -> type_error('te', te1, "<:", te2)
    end
end

-- Used by:
-- * GAMMA :sub_te for tables
function GAMMA :sub_tf(tf1, tf2)
    checks('gamma', 'tf', 'tf')
    match tf1, tf2 with
    | `TCurrently{ te1 }, `TCurrently{ te2 } | `TVar{ te1 }, `TVar{ te2 } -> 
        self :eq_te(te1, te2)
    | `TVar{ te1 }, `TConst{ te2 } | `TConst{ te1 }, `TConst{ te2 } ->
       self :sub_te(te1, te2)
    | _, `TField -> -- pass
    | _, _ -> type_error('tf', tf1, "<:", tf2)
    end
end


-- Returns type associated with variable, in_this_frame
-- Used by:
-- * typeof.Id 
function GAMMA :get_var_tf (var_name)
    checks('gamma', 'string')
    local cell = self.var_types[var_name]
    if not cell then error ("Unknown var "..var_name) end
    if cell.frame == self.current_frame then return cell.type
    else return self :sharp_tf(cell.type) end
end

function GAMMA :get_var_te (var_name)
    checks('gamma', 'string')
    local tf = self :get_var_tf(var_name)
    if tf.tag=='TVar' or tf.tag=='TConst' or tf.tag=='TCurrently' then
        return tf[1]
    else error "Can't access var content" end
end

function GAMMA :new_var (var_name, tf)
    checks('gamma', 'string', 'tf')
    if self.var_types[var_name] then
        error("Variable shadowing, please alphs-rename")
    end
    self.var_types[var_name] = { type=tf, frame=self.current_frame }
end

-- Must elapse when leaving frame,
-- and must know if it's declared in the top-most frame
-- Used by:
-- * typeof.Local, to set new variables to nil
-- * typeof.Function, to create function param types
-- * typeof.Set, to update a variable's type
function GAMMA :set_var_type (var_name, tf)
    checks('gamma', 'string', 'tf')
    local cell = self.var_types[var_name] 
    if not cell then
        error ("Unknown var "..var_name)
    end
    log('GAMMA', 'DEBUG', "V:  %s: %s", var_name, a2s(tf))
    cell.type = tf
end

function GAMMA :set_sharp (var_name)
    checks('gamma', 'string')
    if self.prim_types[var_name] then return end
    self.te.sharp[var_name] = true
    log('GAMMA', 'DEBUG', "#:  %s is non-linear", var_name)
end

frame_idx = 1

-- Used by:
-- * typeof.Function, to create a new frame
function GAMMA :enter_frame()
    table.insert(self.stacked_frames, self.current_frame)
    frame_idx = frame_idx + 1
    self.current_frame = frame_idx
end

-- Used by:
-- * typeof.Function, to leave a frame
function GAMMA :leave_frame()
    self.current_frame = table.remove(self.stacked_frames)
end

function type_error(t, a, op, b)
    checks('string', 'table', 'string', 'table')
    local msg = string.format("Cannot prove %s %s %s",
                              a2s(a), op, a2s(b))
    error(msg)
end

function GAMMA :tostring()

    local lines = { }
    local function acc(...) table.insert(lines, table.concat{...}) end
    local cat = |...| table.concat(table.imap(...), ', ')
    for name, list in pairs(self.te.eq) do
        acc ('  ', name, ' = ', cat(a2s, list))
    end
    for name, list in pairs(self.te.sub_pos) do
        acc ('  ', name, ' <: ', cat(a2s, list))
    end
    for name, list in pairs(self.te.sub_neg) do
        acc ('  ', name, ' :> ', cat(a2s, list))
    end
    for name, list in pairs(self.tebar.eq) do
        acc ('  ', name, ' = ', cat(a2s, list))
    end
    if next(self.te.sharp) then
        local sharps = { }
        for v, _ in pairs(self.te.sharp) do table.insert(sharps, v) end
        table.sort(sharps)
        acc('  non-linear variable types: ', table.concat(sharps, ', '))
    end
    for name, cell in pairs(self.var_types) do
        acc ('  ', name, ': ', a2s(cell.type))
    end
    return table.concat(lines, '\n')
end

-- Simplify the constraints if possible, causes an error if the
-- constraints can't be satisfied.
-- The simplification is more restrictive than the original gamma,
-- it converts some "<:" constraints into "==" ones,
-- get sane types.
function GAMMA :simplify()
    local compare = require 'tilo.compare'

    local function set_eq(name, te)
        local x = self.te.eq[name]
        if x then table.insert(x, te) else self.te.eq[name]={te} end
    end

    local function is_var(x)
        return x.tag=='TId' and not self.prim_types[x[1]] and x[1]
    end

    -- Iterates over pairs of variables represented in x.
    -- x must be an `eq` or `sub_*` subfield of gamma.
    local function var_pairs(x)
        local var, list = next(x)
        local i = 1
        local function iterate()
            local t
            t, i = list[i], i+1
            if t~=nil then
                if is_var(t) then return var, t[1]
                else return iterate() end
            end
            i, var, list = 1, next(x, var) -- next var/list pair
            if not var then return nil, nil end
            return iterate()
        end
        return iterate
    end

    -- Convert v1<:v2 constraints into v1==v2
    for v1, v2 in var_pairs(self.te.sub_pos) do set_eq(v1, `TId{v2}) end
    for v1, v2 in var_pairs(self.te.sub_neg) do set_eq(v1, `TId{v2}) end

    -- Get the transitive closure of equality between variables.
    local synonyms = { } -- name -> name set
    for v1, v2 in var_pairs(self.te.eq) do
        local synonyms_v1=synonyms[v1]
        if synonyms_v1 then synonyms_v1[v2]=true
        else synonyms[v1]={ [v1]=true, [v2]=true } end
    end

    -- Flatten synonyms.
    -- (find a single representant for each equality class).
    repeat
        local again = false
        local v1 = next(synonyms)
        local synonyms_v1 = synonyms[v1]
        for v2 in pairs(synonyms_v1) do
            local synonyms_v2 = synonyms[v2]
            if v1~=v2 and synonyms_v2 then -- move synonyms from v2 to v1
                again=true
                for v3 in pairs(synonyms_v2) do 
                    synonyms_v1[v3]=true
                end
                synonyms[v2] = nil -- remove them from v2
            end
        end
    until not again

    -- Debug trace
    print "synonyms:"
    for v, set in pairs(synonyms) do
        local lst = { }
        for x in pairs(set) do table.insert(lst, x) end
        printf("%s -> %s", v, table.concat(lst, ', '))
    end

    -- TODO: not useful anymore
    -- Reverse synonyms: associates to each var its canonical one.
    -- representant[v] = canonical representant of
    local canonical = { }
    for v1, synonyms_v1 in pairs(synonyms) do
        for v2 in pairs(synonyms_v1) do
            canonical[v2] = v1
        end
    end

    -- Move all relationships to the canonical variable.
    for _, rel in ipairs{ self.te.eq, self.te.sub_pos, self.te.sub_neg } do
        for v1, synonyms_v1 in pairs(synonyms) do
            local new_terms_v1 = { }
            for v2 in pairs(synonyms_v1) do
                -- Add to v1
                for _, term in ipairs(rel[v2] or { }) do
                    table.insert(new_terms_v1, term)
                end
                rel[v2] = nil -- Remove from v2
            end
            rel[v1] = new_terms_v1
        end
    end

    -- Collect upper bounds of variables: get the min of
    -- non-variables (v <: t_n forall n ==> v <: min(t_n forall n)),
    -- unless t_n is a variable.
    local upper_bounds = { }
    for name, items in pairs(self.te.sub_pos) do
        local supers = { } -- types bigger than item
        for _, item in ipairs(items) do
            if not is_var(item) then table.insert(supers, item) end
        end
--table.print(supers)
        local super = compare.min.te(unpack(supers))
        if not super then error("Can't find an upper bound for "..name) end
        upper_bounds[name] = super
    end

    -- Collect upper bounds of variables: get the max of
    -- non-variables (v :> t_n forall n ==> v :> max(t_n forall n)),
    -- unless t_n is a variable.
    local lower_bounds = { }
    for name, items in pairs(self.te.sub_neg) do
        local subs = { }
        for _, item in ipairs(items) do
            if not is_var(item) then table.insert(subs, item) end
        end
        local sub = compare.max.te(unpack(subs))
        if not sub then error("Can't find a lower bound for "..name) end
        lower_bounds[name] = sub
    end

    -- Check that upper bounds don't violate lower bound constraints,
    -- change tham into equalities (v<:t ==> v==t)
    for name, upper in pairs(upper_bounds) do
        local lower = lower_bounds[name]
        if lower then printf("TODO: check %s <: %s", a2s(lower), a2s(upper)) end
        set_eq(name, upper)
    end

    -- Re-establish equalities between synonyms
    for v1, synonyms_v1 in pairs(synonyms) do
        local only_v1 = { `TId{ v1 } }
        for v2 in pairs(synonyms_v1) do
            self.te.eq[v2]=only_v1
        end
    end

    for var, min in pairs(upper_bounds) do
        self.te.sub_pos[var] = { min }
    end

    for var, max in pairs(lower_bounds) do
        self.te.sub_neg[var] = { max }
    end
end


--- Empty environmnent constructor
function gamma_new()
    local self = {
        prim_types = {number=1,string=1,boolean=1,['nil']=1},
        stacked_frames = { },
        current_frame = 1,
        var_types = { },
        te = {
            sharp = { },
            eq = { },
            sub_pos = { },
            sub_neg = {  } },
        tebar = {
            eq = { },
            sub_pos = { },
            sub_neg = {  } } }
    return setmetatable(self, GAMMA)
end

