-{ extension 'match' }

local log = require 'log'
local ord = require 'tilo.order'
local a2s = require 'metalua.compiler.ast_to_src'
local u   = require 'tilo.termutils'
local new_constraint = require 'tilo.constraint'

local GAMMA = { }
GAMMA.__index = GAMMA
GAMMA.__type  = 'gamma'

log.setlevel 'ALL'

-- Checks whether a value of type `tf_r` can be held in a field of
-- type `tf_l`.
function GAMMA :accept(tf_l, tf_r)
    checks('gamma', 'tf', 'tf')
    log('GAMMA', 'DEBUG', "%s |> %s", a2s(tf_l), a2s(tf_r))
    match tf_l, tf_r with
    | `TField, _ -> -- pass
    | { tag=_, te_l }, `TJust{ te_r } -> -- recursively compare fields
        match te_l, te_r with
        | `TTable{...}, `TTable{...} ->
            for tf_l2, tf_r2 in u.field_pairs(te_l, te_r) do
                self :accept(tf_l2, tf_r2)
            end
        | _, _ -> self :sub_te(te_r, te_l)
        end
    | `TConst{ te_l }, `TConst{ te_r } -> self :sub_te(te_r, te_l)
    | `TVar{ te_l }, `TVar{ te_r } -> self :eq_te(te_r, te_l)
    | _, _ ->  type_error('tf', tf_l, '|>', tf_r)
    end
end

-- Used by:
-- * `tebar_to_te` to cut first `te` from `tebar` variables
function GAMMA :eq_tebar(tebar1, tebar2)
    checks('gamma', 'tebar', 'tebar')
    match tebar1, tebar2 with
    | `TUnkbar{ name }, `TUnkbar{ name } -> -- pass
    | `TUnkbar{ name1 }, `TUnkbar{ name2 } ->
        self.tebar.eq :add(name1, tebar2)
        self.tebar.eq :add(name2, tebar1)
    | `TUnkbar{ name }, tebar | tebar, `TUnkbar{ name } ->
        self.tebar.eq :add(name, tebar)
    | `TDynbar, _  | _, `TDynbar -> -- pass
    | `TCatbar, _ | _, `TCatbar -> error "not implemented"
    | _, _ if tebar1.tag==nil and tebar2.tag==nil ->
        local n = math.max(#tebar1, #tebar2)
        for i=1,n do
            gamma :eq_te(tebar1[i] or `TId "nil", tebar2[i] or `TId "nil")
        end
    end
end

-- Used by:
-- * `typeof.Annot`, to check that the annotation is a weakening
function GAMMA :sub_ts(ts1, ts2)
    checks('gamma', 'ts', 'ts')
    match ts1, ts2 with
    | `TPass, `TPass -> return nil
    | `TReturn{ teb1 }, `TReturn{ teb2 } -> self :sub_tebar(teb1, teb2)
    | _, _ -> type_error('ts', ts1, '<:', ts2)
    end
end

-- Used by:
-- * `typeof.Call`, to decompose a `TId` into a `TFunction`
-- * `typeof.SetIndex`, for TVar <: [field; k:var te]
-- * `assign`, to check that TVar types don't change
function GAMMA :eq_te(te1, te2)
    checks('gamma', 'te', 'te')
    match te1, te2 with
    | `TDyn, _ | _, `TDyn 
    | `TId{ name }, `TId{ name }
    | `TUnk{ name }, `TUnk{ name } -> -- pass
    -- 2-ways storage probably unnecessary; superceded by case below, then
    --| `TUnk{ n1 }, `TUnk{ n2 } ->
    --    self.te.eq :add (n1, te2)
    --    self.te.eq :add (n2, te1)
    | `TUnk{ name }, te | te, `TUnk{ name } -> -- te isn't a TId nor a TDyn
        self.te.eq :add(name, te)
    | `TTable{...}, `TTable{...} ->
        for tf1, tf2 in field_pairs(te1, te2) do
            self :eq_tf (tf1, tf2)
        end
    | `TFunction{ tebar_1a, tebar_1b }, `TFunction{ tebar_2a, tebar_2b } ->
        self :eq_tebar(tebar_1a, tebar_2a)
        self :eq_tebar(tebar_1b, tebar_2b)
    | _, _ -> type_error ('te', te1, '=', te2)
    end
end


-- Used by:
-- currently nobody; might later prove need for some variants
-- of `typeof.Call` where we know almost nothing about args type.
-- TODO: get rid of this?
function GAMMA :sub_tebar(tebar1, tebar2)
    checks('gamma', 'tebar', 'tebar')
    match tebar1, tebar2 with
    | `TDynbar, _ | _, `TDynbar -> -- pass
    | `TUnkbar{ name }, `TUnkbar{ name } -> -- pass
    | _, _ if tebar1.tag==nil and tebar2.tag==nil ->
        --| {tag=nil}, {tag=nil} -> --bug in match?!
        for i=1, math.max(#tebar1, #tebar2) do
            local te1 = tebar1[i] or `TId 'nil'
            local te2 = tebar2[i] or `TId 'nil'
            self :sub_te(te1, te2)
        end
    | `TUnkbar{ name1 }, `TUnkbar{ name2 } ->
        self.tebar.sub_pos :add (name1, tebar2)
        self.tebar.sub_neg :add (name2, tebar1)
    | `TUnkbar{ name }, tebar ->
        self.tebar.sub_pos :add(name, tebar)
    | tebar, `TUnkbar{ name } ->
        self.tebar.sub_new :add(name, tebar)
    | `TCatbar{ car1, cdr1 },`TCatbar{ car2, cdr2} ->
        self :sub_te (car1, car2)
        self :sub_tebar (cdr1, cdr2)
    | `TCatbar{ car1, cdr1 }, {tag=nil, car2, ... } ->
        local cdr2 = {...}
        self :sub_te (car1, car2)
        self :sub_tebar (cdr1, cdr2)
    | {tag=nil, car1, ... }, `TCatbar{ car2, cdr2 } ->
        local cdr1 = {...}
        self :sub_te (car1, car2)
        self :sub_tebar (cdr1, cdr2)
    | _, _ -> type_error ('tebar', te1, '<:', te2)
    end
end

-- Used by: 
-- * `typeof.Index`, for TVar <: [field; k:const v]
-- * `typeof.SetIndex`, when table is a TId, to check new value type compat
-- * `typeof.Set`, to check compat between new var value with annotation
function GAMMA :sub_te(te1, te2)
    checks('gamma', 'te', 'te')
    match te1, te2 with
    | `TDyn{...}, _ | _, `TDyn{...}
    | `TId{ name }, `TId{ name }
    | `TUnk{ name }, `TUnk{ name } -> -- pass
    | `TUnk{ name1 }, `TUnk{ name2 } ->
        self.te.sub_pos :add (name1, te2)
        self.te.sub_neg :add (name2, te1)
    | `TUnk{ name }, te -> self.te.sub_pos :add (name, te)
    | te, `TUnk{ name } -> self.te.sub_neg :add (name, te)
    | `TFunction{ args1, res1 }, `TFunction{ args2, res2 } ->
        for i=1, math.max(#args1, #args2) do
            local arg1 = args1[i] or `TCurrently{ `TId 'nil' }
            local arg2 = args2[i] or `TCurrently{ `TId 'nil' }
            self :sub_te(arg2, arg1)
        end
        self :sub_tebar(res1, res2)
    | `TTable{ def1, pairs1 }, `TTable{ def2, pairs2 } ->
        for tf1, tf2 in u.field_pairs(te1, te2) do
            self :sub_tf (tf1, tf2)
        end
    | _, _ -> type_error('te', te1, "<:", te2)
    end
end

-- Used by:
-- * GAMMA :sub_te for tables
function GAMMA :sub_tf(tf1, tf2)
    checks('gamma', 'tf', 'tf')
    match tf1, tf2 with
    | `TCurrently{ te1 }, `TCurrently{ te2 } | `TVar{ te1 }, `TVar{ te2 } -> 
        self :eq_te(te1, te2)
    | `TVar{ te1 }, `TConst{ te2 } | `TConst{ te1 }, `TConst{ te2 } ->
       self :sub_te(te1, te2)
    | _, `TField -> -- pass
    | _, _ -> type_error('tf', tf1, "<:", tf2)
    end
end


-- Returns type associated with variable, in_this_frame
-- Used by:
-- * typeof.Id 
function GAMMA :get_var_tf (var_name)
    checks('gamma', 'string')
    local cell = self.var_types[var_name]
    if not cell then error ("Unknown var "..var_name) end
    if cell.frame == self.current_frame then return cell.type
    elseif cell.type.tag=='TCurrently' then return `TField
    else return cell.type end
end

function GAMMA :get_var_te (var_name)
    checks('gamma', 'string')
    local tf = self :get_var_tf (var_name)
    return tf[1] or error "Can't access var content"
end

function GAMMA :new_var (var_name, tf)
    checks('gamma', 'string', 'tf')
    if self.var_types[var_name] then
        error("Variable shadowing, please alpha-rename")
    end
    self.var_types[var_name] = { type=tf, frame=self.current_frame }
    log('GAMMA', 'DEBUG', "V:  %s: %s", var_name, a2s(tf))
end

-- Must elapse when leaving frame,
-- and must know if it's declared in the top-most frame
-- Used by:
-- * typeof.Local, to set new variables to nil
-- * typeof.Function, to create function param types
-- * typeof.Set, to update a variable's type
function GAMMA :set_var_type (var_name, tf)
    checks('gamma', 'string', 'tf')
    local cell = self.var_types[var_name] 
    if not cell then
        error ("Unknown var "..var_name)
    end
    log('GAMMA', 'DEBUG', "V:  %s: %s", var_name, a2s(tf))
    cell.type = tf
end

-- Change into set_upvalue
function GAMMA :set_sharp (var_name)
    checks('gamma', 'string')
    self.te.sharp[var_name] = true
    log('GAMMA', 'DEBUG', "#:  %s is non-linear", var_name)
end

frame_idx = 1

-- Used by:
-- * typeof.Function, to create a new frame
function GAMMA :enter_frame()
    table.insert(self.stacked_frames, self.current_frame)
    frame_idx = frame_idx + 1
    self.current_frame = frame_idx
end

-- Used by:
-- * typeof.Function, to leave a frame
function GAMMA :leave_frame()
    self.current_frame = table.remove(self.stacked_frames)
end

function type_error(t, a, op, b)
    checks('string', 'table', 'string', 'table')
    --local a2s=table.tostring
    local msg = string.format("Cannot prove %s %s %s",
                              a2s(a), op, a2s(b))
    error(msg)
end

function GAMMA :tostring()

    local r = { "# Gamma:", "## Constraints:"}
    local function acc(...)
        local line = table.concat{...}
        if line ~= '' then table.insert(r, line) end
    end

    for _, k in ipairs{
        self.te.eq, self.te.sub_pos, self.te.sub_neg,
        self.tebar.eq,  self.tebar.sub_pos, self.tebar.sub_neg } do
        acc(k :tostring())
    end
    if next(self.te.sharp) then
        local sharps = { }
        for v, _ in pairs(self.te.sharp) do table.insert(sharps, v) end
        table.sort(sharps)
        acc('  non-linear variable types: ', table.concat(sharps, ', '))
    end
    acc "## Variable types:"
    for name, cell in pairs(self.var_types) do
        acc (name, ': ', a2s(cell.type))
    end
    acc "# End of gamma"
    return table.concat(r, '\n')
end


-- Turns inequalities constraints into equalities, 
function GAMMA :simplify()

    -- Turn boundaries into equalities when there's no equality
    log('GAMMA', 'DEBUG', "Changing some '<:' into '='.")
    for _, set in ipairs{ self.te; self.tebar } do
        local all_vars = { }
        for _, constraint in ipairs{ set.eq, set.sub_pos, set.sub_neg } do
            for v in constraint :get_vars() do all_vars[v] = true end
        end
        -- check that upper_bound is indeed bigger than lower bound. As this
        -- might create additional constraints, it's run for all variables
        -- before simplifications.
        for v, _ in pairs(all_vars) do
            local vars1, bound1 = set.sub_pos :get_content(v)
            local vars2, bound2 = set.sub_neg :get_content(v)
            if bound1 and bound2 then self[relation](self, bound2, bound1) end
        end
        for v, _ in pairs(all_vars) do
            local vars1, bound1 = set.eq :get_content(v)
            local vars2, bound2 = set.sub_pos :get_content(v)
            local vars3, bound3 = set.sub_neg :get_content(v)
            local x = bound1 or bound2 or bound3
            if not x then x = vars2 and next(vars2) or vars3 and next(vars3)
                if x then x=`TUnk{x} end
            end
            if x then set.eq :add (v, x) end
        end
    end
end

--- Empty environmnent constructor
function gamma_new()
    -- ord.eq.* return true/false. To use them as min/max like operators,
    -- they need to return false when the two terms are different, and
    -- one of the terms when they're equal. `f` transforms the former kind
    -- of equality operators into the latter.
    local f = |eq| |gamma, a, b| eq(gamma, a, b) and a or false
    local self = {
        stacked_frames = { },
        current_frame = 1,
        var_types = { },
        te = {
            sharp = { },
            eq      = new_constraint('TE', '=',  f(ord.eq.te)),
            sub_pos = new_constraint('TE', '<:', ord.min.te),
            sub_neg = new_constraint('TE', ':>', ord.max.te) },
        tebar = {
            eq      = new_constraint('TEBAR', '=',  f(ord.eq.tebar)),
            sub_pos = new_constraint('TEBAR', '<:', ord.min.tebar),
            sub_neg = new_constraint('TEBAR', ':>', ord.max.tebar) } }
    for _, x in ipairs{ 'te', 'tebar' } do
        for _, y in ipairs{ 'eq', 'sub_pos', 'sub_neg' } do
            self[x][y].gamma = self
        end
    end
    return setmetatable(self, GAMMA)
end

return gamma_new