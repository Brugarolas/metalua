-- Typed terms have the following properties:
-- * `Id{ } nodes have a 2nd child holding their type when they're
--   used on the left of an `Set, or as a `Function parameter;
-- * A new statement `Annot{ ... } holds a sequence of expression types,
--   and states the type of the sequence of statements on its right.
--
-- Terms
-- =====
-- e ::= `Function{ ebar, sbar, {annot*}? }
--     | `Table{ (`Pair{ p, e } | e)* }
--     | `Call{ te, te* } | `Op{ name, e, e? }
--     | L | p
--
-- L ::= `Index{ te, te } | `Id{ name }
--
-- p ::= `Number{ <number> } | `String{ <string> }
--     | `True | `False | `Nil
--
-- s ::= `Set{ { L* } , ebar, {annot*}? }
--     | `Local{ { v* }, tebar, {annot*}? }
--     | `Call{ te, te* }
--
-- Types
-- =====
--
-- te ::= `TDyn
--      | `TId{ <string> }
--      | `TFunction{ tebar, tebar }
--      | `TTable{ tf, { `TPair{ P, tf }* } }
--
-- tebar ::= `TDynbar | `TCatbar{ te, tebar } | `TIdbar{ <string>
--         | { te* }
--
-- ts ::= `TPass | `TReturn{ {te*} }
--
-- tf ::= `TField | `TConst{ te } | `TVar{ te }
--      | `TCurrently{ te } | `Just{ te }
--

-{ extension 'match' }

local a2s = require 'metalua.compiler.ast_to_src'
local gamma = require 'tilo.gamma'
local u = require 'tilo.termutils'
require 'tilo.checkers'

typeof = { }

-- Returns the type of the n first expressions in a sequence thereof.
local function tebar_to_te(gamma, tebar, n)
    checks('gamma', 'tebar', '?number')
    n = n or 1
    local r = { }
    match tebar with
    | { tag=nil, ... } ->
        for i=1, n do r[i] = tebar[i] or `TId 'nil' end
    | `TIdbar{ name } ->
        local tebar2 = u.fresh_tbarvar(name.."_rest")
        for i=n, 1, -1 do
            local v = u.fresh_tvar(name.."_"..i)
            r[i] = v
            tebar2 = `TCatbar{v, tebar2}
        end
        gamma :eq_tebar(tebar, tebar2)
    | `TDynbar -> 
        for i=1, n do r[i] = `Dyn end
    | `TCatbar{ te, rest } ->
        if n==1 then r[1] = te
        else r = { te, tebar_to_te(gamma, rest, n-1) } end
    | _ -> error ("Invalid ebar type "..table.tostring(tebar))
    end
    return unpack(r)
end

local primitive_tags = { Number=1; String=1; Nil=1; True=1; False=1; }
local is_primitive   = |t| primitive_tags[t.tag]

-- Returns the type of e, i.e. a list of expression types.
function typeof.e(gamma, e)
    log('TYPING', 'DEBUG', "E:  %s", a2s(e))
    checks('gamma', 'e')
    match e with
    | `Number{...}   -> return {`TId 'number'}
    | `True | `False -> return {`TId 'boolean'}
    | `Nil           -> return {`TId 'nil'}
    | `String{...}   -> return {`TId 'string'}
    | `Table{...}    -> return { typeof.Table(gamma, e) }
    | `Call{f, ...}  -> return typeof.Call(gamma, f, {...})
    | `Id{name, ...} -> return { typeof.Id(gamma, name) }
    | `Index{t, k}   -> return { typeof.Index(gamma, t, k) }
    | `Op{name, ...} -> return { typeof.Op(gamma, name, {...}) }
    | `Function{ params, body, annots } -> return { typeof.Function(gamma, params, body, annots) }
    | `Function{ params, body } -> return { typeof.Function(gamma, params, body, { }) }
    | _ -> error(table.tostring(e).." isn't a valid expression")
    end
end

local tebar_zero = { }

-- Returns the type of an expression sequence.
-- Might add constraints in `Gamma` or raise an error.
function typeof.ebar(gamma, ebar)
    checks('gamma', 'ebar')
    local n = #ebar
    if n==0 then return tebar_zero else
        local result = { }
        local tebar_i
        for i=1, n do
            tebar_i = typeof.e(gamma, ebar[i])
            result[i] = tebar_to_te(gamma, tebar_i)
        end
        if tebar_i.tag then error "support for final tebar var not implemented" end
        for j=2, #tebar_i do result[n+j-1] = tebar_i[j] end
        return result
    end
end

-- Returns the type of a statements sequence.
-- Might add constraints in `Gamma` or raise an error.
function typeof.sbar(gamma, sbar, from)
    checks('gamma', 'sbar', '?number')
    from = from or 1
    local s1 = sbar[from]
    if not s1 then return `TPass end -- empty sequence
    log('TYPING', 'DEBUG', "S:  %s", a2s(s1))
    match s1 with
    | `Annot{ s }         -> return typeof.Annot(gamma, s, sbar, from+1)
    | `Local{ left, right } -> typeof.Local(gamma, left);  typeof.Set(gamma, left, right, { })
    | `Local{ left, right, annots } -> typeof.Local(gamma, left);  typeof.Set(gamma, left, right, annots)
    | `Set{ left, right, annots } -> typeof.Set(gamma, left, right, annots)
    | `Set{ left, right } -> typeof.Set(gamma, left, right, { })
    | `Call{ f, ... }     -> typeof.e(gamma, s1)
    | `Return{ ... }      -> return typeof.Return(gamma, {...})
    | _ -> error (table.tostring(s1).." isn't a valid statement")
    end
    return typeof.sbar(gamma, sbar, from+1)
end

local tn = `TId "number"
local op_types = { add=tn, sub=tn, mul=tn, div=tn, mod=tn, pow=tn,
                   unm=tn, concat = `TId "string" }

function typeof.Op(gamma, name, args)
    checks('gamma', 'string', 'ebar')
    local t = op_types[name] or `TDyn
    for _, e in ipairs(args) do
        local tebar = typeof.e(gamma, e)
        local te = tebar_to_te(gamma, tebar)
        gamma :eq_te (te, t)
    end
    return t
end

-- Returns a variable's type. If it hasn't been defined in
-- the current sbar, the type is weakened to its future type.
function typeof.Id(gamma, name)
    checks('gamma', 'string')
    return gamma :get_var_te (name)
end

-- Weakens the type of `sbar` into type `annot`.
-- To
function typeof.Annot(gamma, annot, sbar, from)
    checks('gamma', 'ts', 'sbar', '?number')
    local ts = typeof.sbar(gamma, sbar, from)
    gamma :sub_ts (ts, annot)
    return annot
end

-- Type all variables in `vars` to `nil`
function typeof.Local(gamma, vars)
    checks('gamma', 'vbar')
    for _, var in ipairs(vars) do
        local var_name = var[1]
        gamma :new_var (var_name, `TCurrently{ `TId 'nil' })
    end
    return `TPass
end

-- Wrap the type of the result into `TReturn`
function typeof.Return(gamma, results)
    checks('gamma', 'ebar')
    return `TReturn{ typeof.ebar (gamma, results) }
end

-- Type a literal table with `TCurrently` fields 
function typeof.Table(gamma, t)
    checks('gamma', 'e')
    local prs = { }
    local result = `TTable{ `TJust{ `TId 'nil' }, prs }
    local i = 0
    for _, item in ipairs(t) do
        local k, v
        if item.tag=='Pair' then k, v = unpack(item)
        else i=i+1; k, v =`Number{i}, item end
        typeof.e (gamma, k) -- find type errors in k
        local tv = tebar_to_te (gamma, typeof.e(gamma, v))
        if not is_primitive(k) then
            -- TODO: try to weaken the table's type to `Dyn
            error "Only primitive keys are supported"
        end
        table.insert(prs, `TPair{k, `TJust{tv}})
    end
    return result
end

-- Check that args<:params, return results type
function typeof.Call(gamma, f, args)
    checks('gamma', 'e', 'ebar')
    local te_f = tebar_to_te(gamma, typeof.e(gamma, f))
    local tebar_args = typeof.ebar(gamma, args)
    match te_f with
    | `TDyn -> -- pass
    | `TFunction{ tebar_params, tebar_results } -> -- we know it's a function
        tebar_args = { tebar_to_te(gamma, tebar_args, #tebar_params) }
        for i, te_param in ipairs(tebar_params) do
            local te_arg = tebar_args[i]
            gamma :accept (`TVar{ te_param }, `TJust{ te_arg })
        end
        return tebar_results
    | `TId{ name } -> -- we just learned it's a function
        local tebar_results = u.fresh_tbarvar(name..'_r')
        local tebar_params  = u.fresh_tbarvar(name..'_p')
        gamma :eq_te (te_f, `TFunction{ tebar_params, tebar_results })
        if tebar_args.tag ~= nil then error "not implemented" end
        tebar_params = { tebar_to_te(gamma, tebar_params, #tebar_args) }
        for i, te_param in ipairs(tebar_params) do
            gamma :sub_te(tebar_args[i], te_param)
        end
        return tebar_results
    | _ -> error ("Bad function type "..table.tostring(te_f))
    end
end


-- I need to know the type of what's in field k from gamma!!!
function typeof.Index(gamma, t, k)
    checks('gamma', 'e', 'e')
    if not is_primitive(k) then error 'non-primitive key' end
    local ttbar = typeof.e(gamma, t)
    local tt = tebar_to_te(gamma, ttbar)
    match tt with
    | `TDyn -> -- pass
    | `TId{ name } ->
        local suffix = 'idx'
        if k.tag=='String' and string['match'](k[1], "^[A-Za-z0-9_]+$")
        then suffix=k[1] end
        local v = u.fresh_tvar(name..'_'..suffix)
        local tt_max = `TTable{ `TField, {`TPair{ k, `TConst{ v }}} }
        -- It should work with `TCurrently as well, but such fields
        -- aren't normally hidden in a `TId.
        gamma :sub_te (tt, tt_max)
        return v
    | `TTable{ ... } ->
        match u.get_field_type(tt, k) with
        | { tag=_, e } -> return e -- currently/var/const
        | `TField -> error "Can't read private field"
        | _ -> error ("malformed type "..table.tostring(tt))
        end
    | _ -> error("non-table type "..table.tostring(tt))
    end
end

function typeof.Function(gamma, params, body, annots)
    checks('gamma', 'vbar', 'sbar', 'table')    local tebar_params = { }
    gamma :enter_frame()
    for i, var in ipairs(params) do
        local name  = var[1]
        local te    = annots[i] or u.fresh_tvar('arg')
        gamma :new_var(name, `TVar{ te })
        tebar_params[i] = te
    end
    gamma :enter_frame() -- will force to complete param types
    local ts_body = typeof.sbar(gamma, body)
    local tebar_result
    match ts_body with
    | `TReturn{ tebar } -> tebar_result = tebar
    | `TPass -> tebar_result = { `TId 'nil' }
    end
    gamma :leave_frame()
    gamma :leave_frame()
    return `TFunction{ tebar_params, tebar_result }
end


local assign, assign_cur_index, assign_cur_id

-- Computes sigma in gamma |- assign(ell, new_tf) = sigma
--
-- ell: left-hand-side term receiving the assignment
-- old_tf: type of ell before assignment
-- new_tf: future type of ell after assignment
function assign(gamma, ell, old_tf, new_tf)
    checks('gamma', 'ell', 'tf', 'tf')
    --printf("Compute gamma |- assign(%s, %s), old_tf=%s", a2s(ell), a2s(new_tf), a2s(old_tf))
    match old_tf, new_tf with
    | `TVar{ te1 }, `TVar{ te2 }   -> gamma :eq_te (te1, te2)
    | `TVar{ te1 }, `TConst{ te2 } -> gamma :sub_te (te1, te2)
    -- TODO assign var->const not in the paper!!!
    | `TCurrently{ _ }, _ ->
        match ell with
        | `Index{ et, ek } -> assign_cur_index(gamma, et, ek, new_tf)
        | `Id{ name }      -> assign_cur_id(gamma, name, new_tf)
        | _ -> error "Can't type assignment's LHS"
        end
    | _, _ ->
        error("Assignment can't update field "..
              a2s(old_tf).." into "..a2s(new_tf))
    end
end

-- Change the type of etable[ekey] to new_tf in gamma.  It's already
-- been checked that etable[ekey] has a "currently" type.
--
-- etable: indexed table in the lhs term
-- ekey: key of the lhs term
-- new_tf: type to be given to etable[ekey]
function assign_cur_index(gamma, etable, ekey, new_tf)
    checks('gamma', 'e', 'e', 'tf')
    local old_tf_table = typeof.ell(gamma, etable)
    printf("Compute gamma |- assign(%s[%s], %s), old_etable=%s",
           a2s(etable), a2s(ekey), a2s(new_tf), a2s(old_tf_table))
    match old_tf_table with
    | `TCurrently{ `TTable{ ... } == tt } ->
        local new_tf_table = `TCurrently{ u.set_field_type(tt, ekey, new_tf) }
        assign(gamma, etable, old_tf_table, new_tf_table)
    | `TVar{ `TTable{ ... } == tt } ->
        local new_tf_table = `TCurrently{ u.set_field_type(tt, ekey, new_tf) }
        gamma :sub_tf (new_tf_tabe, old_tf_table)
    | `TCurrently{ `TDyn } | `TVar{ `TDyn } -> -- pass, it stays a `TDyn
    | _ -> error ("Don't know how to change a field type in "..a2s(old_tf_table))
    end
end

function assign_cur_id(gamma, name, new_tf)
    checks('gamma', 'string', 'tf')
    gamma :set_var_type(name, new_tf)
end

-- Type an expression on the left-hand-side of an assignment
function typeof.ell(gamma, ell)
    checks('gamma', 'ell')
    match ell with
    | `Id{ var_name } -> return gamma :get_var_tf (var_name)
    | `Index{ e_t, p_k } ->
        -- TODO: check if e_t is TCurrently. If it is and te_t is as well,
        -- guess a currently type rather than a var
        if not is_primitive(p_k) then error "can't type this key" end
        local tebar_t = typeof.e(gamma, e_t)
        local te_t = tebar_to_te(gamma, tebar_t)
        match te_t with
        | `TId{ tvar_name } -> -- I'm going to guess that it's non-linear
            local guessed_tag = 'TVar'
            if e_t.tag=='Index' or e_t.tag=='Id' then
                local ell2=typeof.ell(gamma, e_t)
                if ell2.tag=='TCurrently' then 
                    guessed_tag='TCurrently'
                end
            end
            local k_name = p_k[1] or p_k.tag :lower()
            local v = u.fresh_tvar(tvar_name..'_'..k_name)
            local tf = { tag=guessed_tag, v }
            gamma :sub_te (te_t, `TTable{ `TField; {`TPair{p_k, tf}} })
            return tf
        | `TTable{ ... } ->
             return u.get_field_type(te_t, p_k)
        | `TDyn -> return `TCurrently{ `TDyn } -- TODO: is "currently" ok here?
        end
    end
end

-- Returns the smallest tf which accepts `tf_right`, with a preference
-- for `TCurrently over `TVar.
-- Used by typeof.Set to guess a type for a variable
local function guess_lhs(gamma, is_field, tf_right)
    checks('gamma', 'boolean', 'tf')
    match tf_right with
    | `TCurrently{ ... } | `TField -> return `TField
    | `TConst{ ... } | `TVar{ ... } -> return tf_right
    | `TJust{ te }->
        local tag = is_field and 'TVar' or 'TCurrently'
        match te with
        | `TId "nil" -> return `TCurrently{ te }
        | `TId{ ... } | `TDyn | `TFunction{ ... } -> return{tag=tag; te }
        | `TTable{ ... } ->
            return `TCurrently{ u.table_map(te, |tf| guess_lhs(gamma, true, tf)) }
        end
    end
end

function typeof.Set(gamma, terms_left, terms_right, annots)
    checks('gamma', 'table', 'table', 'table')
    local tebar_right = typeof.ebar(gamma, terms_right)
    tebar_right = { tebar_to_te(gamma, tebar_right, #terms_left) }

    for i, term_left in ipairs(terms_left) do
        local te_right = tebar_right[i]
        local old_left = typeof.ell(gamma, term_left)
        local new_left = annots[i]
        if not new_left then -- Guess a decent future field type
            match old_left with
            | `TCurrently{ _ } -> new_left = guess_lhs(gamma, term_left.tag=='Index', `TJust{ te_right })
            | `TVar{ _ }       -> new_left = old_left
            | `TConst{ _ }     -> error "Don't override a constant field"
            | `TField          -> error "Don't write in a private field"
            | `TJust{ _ }      -> assert(false) -- cannot be on left
            end
        end
        -- Is it legal to write term_right into term_left?
        gamma :accept (new_left, `TJust{te_right})
        -- If it is, perform the appropriate changes on gamma.
        assign(gamma, term_left, old_left, new_left)
    end
    return `TPass
end
