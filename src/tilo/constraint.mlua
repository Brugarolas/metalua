local a2s = require 'metalua.compiler.ast_to_src'

CONSTRAINT = { }
CONSTRAINT.__index = CONSTRAINT
CONSTRAINT.__type  = 'gamma.constraint'

function CONSTRAINT :add (var_name, val)
    checks('gamma.constraint', 'string', 'te|tebar')
    --local a2s=table.tostring
    log('CONSTRAINT', 'DEBUG', "%s: %s %s %s",
        self.set_name, var_name, self.op_name, a2s(val))
    local x = self.content[var_name]
    local isnt_prim = val.tag=='TId' and not self.gamma.prim_types[val[1]]
    match val, x with
    | `TId{ name }, { vars=v } if isnt_prim -> v[name]=true; x=nil
    | `TId{ name }, nil if isnt_prim -> x = { vars={[name]=true}, bound=false }
    | t, { bound=false } -> x.bound=t; x=nil
    | t, nil -> x = { vars={ }; bound=t }
    | t, { bound=b } -> x.bound=self.combine(self.gamma, b, t); x=nil
    end
    if x then self.content[var_name]=x end
end

function CONSTRAINT :get_vars()
    return pairs(self.content)
end

function CONSTRAINT :get_content(var_name)
    checks('gamma.constraint', 'string')
    local cell = self.content[var_name]
    if cell then return cell.vars, cell.bound end
end

function CONSTRAINT :tostring()
    local r = { }
    local function acc(...) table.insert(r, table.concat{...}) end
    for name, x in pairs(self.content) do
        local v = { }
        for var, _ in pairs(x.vars) do
            table.insert(v, var)
        end
        if #v>1 then
            acc(name, " ", self.op_name, " { ", table.concat(v, ", "), " }")
        elseif #v==1 then
            acc(name, " ", self.op_name, " ", v[1])
        end
        if x.bound then acc(name, " ", self.op_name, " ", a2s(x.bound)) end
    end
    return table.concat(r, "\n")
end

-- Builds a list of directly connected variable names 
-- (name -> name set) out a a gamma.constraint.
local function constraint2synonyms(constraint)
    checks('gamma.constraint')

    local synonyms = { } -- name -> name set
    for v1 in constraint :get_vars() do
        local vars, _ = constraint :get_content(v1)
        for v2 in pairs(vars) do
            local synonyms_v1=synonyms[v1]
            if synonyms_v1 then synonyms_v1[v2]=true
            else synonyms[v1]={ [v1]=true, [v2]=true } end
        end
    end
    return synonyms
end

-- synonyms -> (var_name=>canon_name)
local function synonyms2canon(synonyms)
    if not next(synonyms) then return { } end
    local canon = { } -- var -> var_canon

    -- var_name -> canonical var_name
    repeat
        local again = false
        for v1, synonyms_v1 in pairs(synonyms) do
            local canon_v1=canon[v1]
            if not canon_v1 then canon[v1], canon_v1, again = v1, v1, true end
            for v2 in pairs(synonyms_v1) do
                local canon_v2 = canon[v2]
                if canon_v2 ~= canon_v1 then
                    --printf("Making %s the canon for %s instead of %s",
                    --       canon_v1, v2, tostring(canon_v2))
                    again=true
                    if not canon_v2 then canon[v2] = canon_v1 else
                        for v, vc in pairs(canon) do
                            if vc==canon_v2 then canon[v] = canon_v1 end
                        end
                    end
                end
            end
        end
    until not again
    return canon
end

-- (var_name=>canon_name) -> (canon_name=>var_name set)
local function canon2classes(canon)
    local classes = { }
    for v, canon_v in pairs(canon) do
        local c = classes[canon_v]
        if c then c[v]=true
        else classes[canon_v]={[v]=true} end
    end
    return classes
end

-- (canon_name=>var_name set) -> (var_name => term)
local function classes2sigma(classes, canon, constraint, sigma)
    local sigma = sigma or { }
    for canon_v, class in pairs(classes) do
        local t = nil
        for v, _ in pairs(class) do
            local _, bound = constraint :get_content (v)
            if bound then
                if t and not cmp.eq.ast(t, bound) then error "multiple bounds not implemented"
                else t = bound end
            end
        end
        t = t or `TId{ canon_v }
        for v, _ in pairs(class) do
            if t.tag~='TId' or t[1]~=canon_v then sigma[v]=t end
        end
    end
    for v, _ in pairs(constraint.content) do
        if not canon[v] then
            local _, t = constraint :get_content (v)
            sigma[v] = assert(t)
        end
    end
    return sigma
end

function CONSTRAINT :get_sigma (sigma)
    local synonyms = constraint2synonyms(self)
    --log('CONSTRAINT', 'DEBUG', "Synonyms = %s", table.tostring(synonyms))
    local canon = synonyms2canon(synonyms)
    --log('CONSTRAINT', 'DEBUG', "Canon = %s", table.tostring(canon))
    local classes = canon2classes(canon)
    --log('CONSTRAINT', 'DEBUG', "Classes = %s", table.tostring(classes))
    local sigma = classes2sigma(classes, canon, self, sigma)
    --log('CONSTRAINT', 'DEBUG', "Sigma = %s", table.tostring(sigma))
    return sigma
end

function new_constraint(set_name, op_name, combine)
    checks('string', 'string', 'callable')

    local function c2(gamma, a, b)
        local bound =
            op_name=='<:' and 'min' or
            op_name==':>' and 'max' or
            op_name=='='  and 'equality' or
            assert(false, "bad operator")
        local r = combine(gamma, a, b)
        if not r then
            error(string.format("No %s of %s and %s",
                                bound, a2s(a), a2s(b)))
        else
            --local a2s=table.tostring
            log('CONSTRAINT', 'DEBUG', "%s(%s, %s) = %s",
                bound, a2s(a), a2s(b), a2s(r))
            return r
        end
    end

    local self   = {
        combine  = c2,
        set_name = set_name,
        op_name  = op_name,
        content  = { } }
    return setmetatable(self, CONSTRAINT)
end

return new_constraint