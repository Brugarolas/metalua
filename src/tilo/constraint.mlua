CONSTRAINT = { }
CONSTRAINT.__index = CONSTRAINT
CONSTRAINT.__type  = 'gamma.constraint'

function CONSTRAINT :add (var_name, val)
    checks('gamma.constraint', 'string', 'table')
    local x = self.content[var_name]
    match val, x with
    | `TId{ name }, { vars=v } -> v[name]=true; x=nil
    | `TId{ name }, nil -> x = { vars={[name]=true}, bound=false }
    | t, { bound=false } -> x.bound=t; x=nil
    | t, nil -> x = { vars={ }; bound=t }
    | t, { bound=b } -> x.bound=self.combine(b, t); x=nil
    end
    if x then self.content[var_name]=x end
    log('CONTRAINT', 'DEBUG', "%s: %s %s %s",
        self.set_name, var_name, self.op_name, a2s(val))
end

function CONSTRAINT :tostring()
    local r = { }
    local function acc(...) table.insert(r, table.concat{...}) end
    for name, x in pairs(self.content) do
        local v = { }
        for var, _ in pairs(x.vars) do
            table.insert(v, var)
        end
        if #v>1 then
            acc(name, " ", self.op_name, " { ", table.concat(v, ", "), " }")
        elseif #v==1 then
            acc(name, " ", self.op_name, " ", v[1])
        end
        if x.bound then acc(name, " ", op, a2s(x.bound)) end
    end
    return table.concat(r, "\n")
end

function new_constraint(set_name, op_name, combine)
    checks('string', 'string', 'callable')

    local function c2(a, b)
        local bound =
            self.op_name=='<:' and 'max' or
            self.op_name==':>' and 'min' or
            self.op_name=='='  and 'equality' or
            assert(false, "bad operator")
        local r = combine(a, b)
        if not r then
            error(string.format("No %s of %s and %s",
                                bound, a2s(a), a2s(b)))
        else
            log('CONSTRAINT', 'DEBUG', "%s(%s, %s) = %s",
                bound, a2s(a), a2s(b), a2s(r))
            return r
        end
    end

    local self   = {
        combine  = c2,
        set_name = set_name,
        op_name  = op_name,
        content  = { } }
    return setmetatable(self, CONSTRAINT)
end

return new_constraint