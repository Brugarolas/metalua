-{ block:

   require 'lexer'

   local my_lexer = lexer.lexer:clone() -- no keywords
   my_lexer:add{"X", "Y"}

   mlp.lexer:add "V"


   function with_lexer(new_lexer, parser)
      return function (lx)
         local old_lexer = getmetatable(lx)
         lx:sync()
         setmetatable(lx, new_lexer)
         local status, result = pcall(parser, lx)
         lx:sync()
         setmetatable(lx, old_lexer)
         if status then return result else error(result) end
      end
   end

   function num(lx)
      local a = lx:next()
      assert(a.tag=='Number')
      return a
   end
      
   my_parser = gg.list{
      gg.multisequence{
         { "X", num, builder = |x| `Table{ x[1], +{0} } },
         { "Y", num, builder = |y| `Table{ +{0}, y[1] } } },
      separators = { ',', ';' },
      builder = function(l) l.tag='Table'; return l end }

   mlp.expr:add{ "V", with_lexer(my_lexer, my_parser), builder = unpack } }

-- Use the local lexer:
foo = V X 1, Y 2, X 3

-- Use X and Y as Id, in the unpolluted lexer:
print "Vector:"
X = table.tostring(foo)
print (X)

print "Sum:"
Y = |v| table.ifold (|a,b| table.imap (|c,d| c+d, a, b), {0,0}, v) 
table.print (Y(foo))

